var $jm = { debug: true, _hash: {}, cache: { set: function (key, value) { $jm._hash[key] = value; }, get: function (key) { return $jm._hash[key]; }, count: function () { var i = 0; for (var k in $jm._hash) { i++; } return i; }, remove: function (key) { delete $jm._hash[key]; }, contains: function (key) { return typeof ($jm._hash[key]) != "undefined"; } }, rootUrl: '/', msgType: { log: 0, error: 1, info: 2, warn: 3 }, out: function (msg, t) { if (this.debug && window.console) { if (window.console.log && t == $jm.msgType.log) window.console.log(msg); else if (window.console.error && t == $jm.msgType.error) window.console.error(msg); else if (window.console.warn && t == $jm.msgType.warn) window.console.warn(msg); else if (window.console.info) window.console.info(msg); } }, property: { version: '1.1', name: '家猫js库', copyRight: 'Copyright (c) 20011, jiamaocode.com, All rights reserved', debug: true} }; $jm.toString = function () { return $jm.property.name + ' \n\nVersion:' + $jm.property.version + ' \n\n ' + $jm.property.copyRight; }; $jm.isNull = function (s) { return s == null || typeof s == 'undefined'; }
$jm.load = function (url, callback) { $.ajax({ url: url, type: "get", success: function (js) { if (callback) callback(js); } }); }
$jm.loadCss = function (url, mark, callback) {
    $.ajax({ url: url, type: "get", success: function (css) {
        var style = mark ? $('#' + mark) : $('div[url="' + url + '"]'); if (!style || style.length == 0) { style = $('<div style="display:none;"></div>'); if (mark) style.attr('id', mark); style.attr('url', url); style.appendTo('body'); }
        style.html('<style>' + css.replace(/~\//ig, $jm.rootUrl) + '</style>'); if (callback) callback();
    } 
    });
}
$jm.loadImg = function (url, callback) {
    var img = document.createElement('img'); if (callback) { img.onload = callback; }
    img.src = url;
}
$jm.menu = function (obj, ms) {
    this._target = obj; this._menu = $('<div class="jm_menu"></div>'); this.__body = $('<ul></ul>'); this.__body.appendTo(this._menu); this.id; this.items = {}; this.itemCount = function () { var i = 0; for (var k in this.items) { i++; } return i; }; this.index = 0; this.__itemIndex = 0; var _eventHander = null; var _frameHandler = null; this.IContextMenuHander = null; var _backGround = $(document); var _cancelfun = function () { return false; }; this.zIndex = function (index) {
        if (!$jm.isNull(index)) { this._menu.css('z-index', index); }
        else return this._menu.css('z-index');
    }
    this.show = function (mu, e) { _eventHander = function (evt) { mu.hide(); }; _backGround.bind('click', _eventHander); var position = $jm.getMouseLocation(e, $jm.os.body.element); mu._menu.css('left', position.x); mu._menu.css('top', position.y); mu._menu.show(); }; this.hide = function () { _backGround.unbind('click', _eventHander); this._menu.hide(); }; var _menucache = function (menuid, mu) { if (menuid) { if (mu) $jm.cache.set('jm_menu_' + menuid, mu); else return $jm.cache.get('jm_menu_' + menuid); } }
    var _menuindex = function (index) { if (!$jm.isNull(index)) $jm.cache.set('jm_menu___index', index); else { index = $jm.cache.get('jm_menu___index'); index = Number(index) > 0 ? index : 0; return index; } }
    this.addItem = function (item) {
        var menu = _menucache(this.id); this.__itemIndex++; var itemmark = 'jm_menuitem_' + this.index + '_' + this.__itemIndex; var mitem = $('<li jm_menuitem="' + itemmark + '" jm_menuid="' + this.id + '">' + item.text + '</li>'); if (item.disabled) mitem.attr('disabled', 'disabled'); if (!$jm.isNull(item.tag)) mitem.attr('tag', item.tag); this.items[itemmark] = item; mitem.click(function (evt) {
            var curmenuid = $(this).attr('jm_menuid'); var curmenu = _menucache(curmenuid); var curitemmark = $(this).attr('jm_menuitem'); var curitem = curmenu.items[curitemmark]; if (curitem.disabled == true) return; if (curitem && curitem.click)
            { curitem.click(); }
            if (curmenu) curmenu.hide(); return false;
        }); mitem.appendTo(this.__body);
    }
    this.init = function () {
        this.index = _menuindex() + 1; _menuindex(this.index); _backGround.bind('contextmenu', _cancelfun); this._target.bind('mousedown', function (obj) {
            if (obj.button == 2) {
                var target = $(obj.srcElement || obj.target); var menuid = target.attr('jm_menuid'); var menu = _menucache(menuid); if (menu)
                    menu.show(menu, obj);
            } 
        }); this.id = 'jm_menu_id_' + this.index; this._target.attr('jm_menuid', this.id); if (ms) { for (var i in ms) { this.addItem(ms[i]); } }
        _menucache(this.id, this); this._menu.appendTo($jm.os.body.element);
    }; this.init();
}
$jm.center = function (obj, parent) { if (!parent) parent = $(window.document); var bgWidth = parent.width(); var bgHeight = parent.height(); var popupHeight = $(obj).height(); var popupWidth = $(obj).width(); var t = (bgHeight - popupHeight) / 2 + parent.scrollTop(); var l = (bgWidth - popupWidth) / 2; $(obj).css({ "top": t > 0 ? t : 0, "left": l > 0 ? l : 0 }); }
$jm.getMouseLocation = function (ev, target) { if (!target) target = $(document.body); return { x: ev.clientX - target.offset().left, y: ev.clientY - target.offset().top }; }
$jm.fullWin = function (w, p, offsetx, offsety) { if (!p) p = window; p = $(p); w = $(w); if (!offsetx) offsetx = 0; if (!offsety) offsety = 0; w.width(p.width() + offsetx); w.height(p.height() + offsety); }
$jm.getWinById = function (winid) { if (!winid) return; var wins = $jm.cache.get('jm_win_container'); if (wins) { var len = wins.length; for (var i = 0; i < len; i++) { if (wins[i].id() == winid) return wins[i]; } } }
$jm.getWinByTitle = function (title) { if (!title) return; var wins = $jm.cache.get('jm_win_container'); if (wins) { var len = wins.length; for (var i = 0; i < len; i++) { if (wins[i].title == title) return wins[i]; } } }
$jm._removewin = function (winid) { var wins = $jm.cache.get('jm_win_container'); if (wins) { wins = $.grep(wins, function (val, k) { return val.id() != winid; }); $jm.cache.set('jm_win_container', wins); } }
$jm.closeWinById = function (id) { var win = $jm.getWinById(id); if (!win) return; win.close(); }
$jm.get_top_win = function () {
    var topwin; var wins = $jm.cache.get('jm_win_container'); if (wins) { var len = wins.length; for (var i = 0; i < len; i++) { if (wins[i].winState == $jm.winState.min) continue; if (!topwin || wins[i].zindex() > topwin.zindex()) topwin = wins[i]; } }
    return topwin;
}
$jm.winState = { normal: 0, min: 1, max: 2 }; $jm.win = function (params) {
    if (!params) return; var windowIndex = function (index) {
        if (index) { $jm.cache.set('jm_win_index', index); }
        else return $jm.cache.get('jm_win_index') || 0;
    }
    this.Index = windowIndex() + 1; windowIndex(this.Index); var body = (params.body) ? (typeof (params.body) == "object" ? params.body : $("#" + params.body)) : ""; this.jmwin = true; var headheight = params.headheight || 22; var height = params.height || 100; var width = params.width || 320; var position = params.position || 'auto'; var left = position == 'left' ? 0 : (params.left || '25%'); var top = position == 'top' ? 0 : (params.top || 80); var style = params.style || ""; var __title = params.title || params.name || ''; var __id = params.id || 'jm_win_' + this.Index; this.params = params; this.params.ico = this.params.ico || 'css/default/images/ico.png'; this.id = function () { return __id; }
    this.modal = params.modal; this.winState = $jm.isNull(params.state) ? $jm.winState.normal : params.state; this.resizeable = params.resizeable != false; this.closeCallback = params.closeCallback; this.focusCallback = params.focusCallback; this.subCallback = params.subCallback; this.content = params.content || ''; this.winBody; this.winHead = $('<div class="jm_win_head" jm_winid="' + this.id() + '"></div>'); this.winTitle = $('<span class="jm_win_title" jm_winid="' + this.id() + '"></span>'); this.winBottom = $('<div class="jm_win_bottom" jm_winid="' + this.id() + '"></div>'); this.bodyModel = $('<div class="jm_win_body_model" jm_winid="' + this.id() + '"></div>'); this.win = $('<div class="jm_win" id="' + this.id() + '"></div>'); this.bodyParent = null; this.parent = params.parent ? $(params.parent) : $jm.os.body.element; this.fullDiv = $('<div class="jm_win_full_div"></div>'); this._zindex = $jm.os.config.appMinZIndex; this.zindex = function (index) {
        if (index) { this.win.css('z-index', index + ''); this._zindex = index; }
        else { return this._zindex; } 
    }; this.__actived = false; this.actived = function (v) {
        if (v == true || v == false) { this.__actived = v; v ? this.bodyModel.hide() : this.bodyModel.show(); }
        return this.__actived;
    }
    this.title = function (t) {
        if (typeof t != 'undefined') { __title = t; this.winTitle.html(t); }
        return __title;
    }
    this.width = function (w) {
        if (!$jm.isNull(w)) { this.win.width(w); w = this.win.width(); this.winBody.width(w - 4); this.resize(); }
        else { return this.win.width(); } 
    }
    this.height = function (h) {
        if (!$jm.isNull(h)) { this.win.height(h); h = this.win.height(); this.winBody.height(h - headheight - 6); this.resize(); }
        else { return this.win.height(); } 
    }
    this.resize = function () { if (this.resizeCallback) this.resizeCallback(); }
    this.left = function (l) {
        if (!$jm.isNull(l)) { this.win.css('left', l); }
        else
            return this.win.position().left;
    }
    this.top = function (t) {
        if (!$jm.isNull(t)) { this.win.css('top', t); }
        else
            return this.win.position().top;
    }
    this.__visible = false; this.visible = function (v) {
        if (this.__visible && v == false) { this.__visible = false; this.sub(); this.hide(); }
        else if (!this.__visible && v == true) { this.win.show(); this.changeState(this.__oldState); this.__visible = true; }
        else if (v == true && this.winState == $jm.winState.min) { this.changeState(this.__oldState); this.__visible = true; }
        return this.__visible;
    }
    this.__initButtons = function (par) {
        if (!par) return; var btn = $('<input type="button" class="' +
(par.className ? par.className : 'jm_win_button') + '" value="' + par.text + '" />'); if (par.click) btn.click(function () { par.click(); }); btn.appendTo(this.winBottom);
    }
    this.__initBody = function () {
        if (!$jm.isNull(body) && body != '') { this.winBody = body; if (this.winBody.css('display') == 'none') this.winBody.css('display', ''); this.bodyParent = this.winBody[0].parentElement; } else { this.winBody = $('<div class="jm_win_body"></div>'); this.winBody.parent = null; }
        if (style && style != '') this.winBody.attr('class', style); if (this.title != '') {
            var ico = $('<img src="' + this.params.ico + '" class="jm_win_ico"/>'); ico.appendTo(this.winHead); this.winHead.css('height', headheight + 'px'); this.title(this.title()); this.winTitle.appendTo(this.winHead); var closebtn = $("<a class='cmdbtn close' onclick='javascript:$jm.closeWinById(\"" + this.id() + "\")' href='javascript:;'>X</a>"); closebtn.appendTo(this.winHead); if (this.resizeable) { var maxbtn = $("<a class='cmdbtn max' onclick='javascript:$jm.getWinById(\"" + this.id() + "\").changeState();' href='javascript:;'>口</a>"); maxbtn.appendTo(this.winHead); }
            var minbtn = $('<a class="cmdbtn min" onclick="javascript:$jm.getWinById(\'' + this.id() + '\').min();">一</a>'); minbtn.appendTo(this.winHead); this.winHead.appendTo(this.win);
        }
        this.winBody.appendTo(this.win); this.winBody.html('<div class="jm_wait"></div>'); this.win.css('left', left).css('top', top);
    }
    this.__initBody(); this.loadContent = function () {
        this.winBody.html(''); if (!$jm.isNull(this.content)) {
            if (this.content != '' && !this.params.folder) { this.winBody.html(this.content); }
            else if (this.params.folder) {
                var app = $jm.os.getAppByHandle(this.params.handle); if (app && app.cleaLink) app.cleaLink(); for (var p in this.params.content) {
                    var par = this.params.content[p]; if (typeof par == 'string') { var app = $jm.os.getApp(par); if (app) par = app.params; else continue; }
                    par.container = this.winBody; $jm.os.installApp(par); $jm.os.addLinkItem(par.handle, this.params.handle);
                }
                this.resizeCallback = function () {
                    var app = $jm.os.getAppByHandle(this.params.handle); if (app)
                        app.positionLinks();
                } 
            } 
        }
        if (!$jm.isNull(this.params.url)) {
            if (this.params.iframe) { var fm = $('<iframe frameborder="0" width="100%" height="100%"></iframe>'); fm.attr('src', this.params.url); this.winBody.html(''); fm.appendTo(this.winBody); }
            else { var winid = this.id(); $jm.load(this.params.url, function (html) { var win = $jm.getWinById(winid); if (win) { win.content = html; win.winBody.html(html); } }); } 
        }
        this.bodyModel.appendTo(this.winBody);
    }
    this.__winmousedown = function (evt) { var winobj = $jm.getWinById(this.id || evt.id); if (winobj) { winobj.focus(); } }; this.__headdblclick = function () { var winid = $(this).attr('jm_winid'); var win = $jm.getWinById(winid); if (win) { win.changeState(); } }
    this.show = function (callback) {
        if (this.params.loading && !this.params.loading(this.id())) { return false; }
        if (this.visible()) { this.focus(); return; }
        var wins = $jm.cache.get('jm_win_container'); if (!wins) { wins = []; $jm.cache.set('jm_win_container', wins); }
        wins.push(this); if (this.modal) { this.fullDiv.appendTo(this.parent); }
        this.win.appendTo(this.parent); if (params.button) {
            this.winBottom.html(''); for (var i in params.button)
                this.__initButtons(params.button[i]); this.winBottom.appendTo(this.win);
        }
        if (params.position == 'center') $jm.center(this.win, this.parent); this.width(width); this.height(height); var jmmvdrag = new $jm.objMove(); jmmvdrag.Register(this); if (this.resizeable) { var jmmddrag = new $jm.objResize(); jmmddrag.Register(this); this.winHead.unbind('dblclick', this.__headdblclick); this.winHead.bind('dblclick', this.__headdblclick); }
        else { this.win.css('cursor', 'default'); }
        this.win.unbind('mousedown', this.__winmousedown); this.win.bind('mousedown', this.__winmousedown); if (this.title != '') { var headmenu = new $jm.menu(this.winHead, [{ text: '最大化', tag: this.id(), disabled: !this.resizeable, click: function () { var winid = $(this).attr('tag'); var win = $jm.getWinById(winid); if (win) win.max(); } }, { text: '最小化', tag: this.id(), click: function () { var winid = $(this).attr('tag'); var win = $jm.getWinById(winid); if (win) win.min(); } }, { text: '关闭', tag: this.id(), click: function () { var winid = $(this).attr('tag'); $jm.closeWinById(winid); } }]); }
        this.focus(); this.__visible = true; this.loadContent(); if (callback) callback(); this.saveState(); if (this.winState == $jm.winState.max) { setTimeout('var win = $jm.getWinById("' + this.id() + '");if (win)win.max();', 500); } 
    }
    this.changeState = function (state) {
        if (state == $jm.winState.normal || ($jm.isNull(state) && this.winState == $jm.winState.max))
            this.normal(); else if (state == $jm.winState.max || ($jm.isNull(state) && this.winState == $jm.winState.normal))
            this.max(); else if (state == $jm.winState.min)
            this.min();
    }
    this.hide = function () { this.win.hide(); }
    this.saveState = function () {
        if (this.winState == $jm.winState.min) return; if (this.winState != $jm.winState.max) { this.__oldSize = { w: this.width(), h: this.height() }; this.__oldPosition = { x: this.left(), y: this.top() }; }
        this.__oldState = this.winState;
    }
    this.min = function () { this.saveState(); var winid = this.id(); this.win.animate({ left: 0, top: 0, width: 0, height: 0 }, 500, function () { var win = $jm.getWinById(winid); win.top(-1000); win.sub(); var topwin = $jm.get_top_win(); if (topwin) { topwin.focus(); } }); this.winState = $jm.winState.min; }
    this.max = function () { if (!this.resizeable) return; this.saveState(); this.winState = $jm.winState.max; var w = this.parent.width() - 10, h = this.parent.height() - 10; this.left(0); this.top(0); this.width(w); this.height(h); }
    this.normal = function () { this.winState = $jm.winState.normal; this.width(this.__oldSize.w); this.height(this.__oldSize.h); this.left(this.__oldPosition.x); this.top(this.__oldPosition.y); }
    this.focus = function () {
        if (this.actived() == true) return; var topwin = $jm.get_top_win(); if (topwin) {
            var maxindex = topwin.zindex(); if (topwin.id != this.id()) {
                if (this.zindex() <= maxindex) {
                    if (this.modal) { this.fullDiv.css('z-index', maxindex + 1); this.zindex(maxindex + 2); }
                    else
                        this.zindex(maxindex + 1);
                }
                topwin.sub();
            } 
        }
        if (this.modal) this.fullDiv.css('z-index', this.zindex() - 1); this.win.removeClass('jm_win_sub'); this.actived(true); if (this.focusCallback) this.focusCallback(this.params.handle);
    }
    this.sub = function () { if (this.actived() == false) return; this.win.addClass('jm_win_sub'); this.actived(false); if (this.subCallback) this.subCallback(this.params.handle); }
    this.close = function (callback) {
        if (this.params.closing && this.params.closing() == false) return false; if (this.bodyParent) { this.winBody.css('display', 'none'); this.winBody.appendTo(this.bodyParent); this.bodyParent = null; }
        this.fullDiv.remove(); this.win.remove(); $jm._removewin(this.id()); var topwin = $jm.get_top_win(); if (topwin) topwin.focus(); this.__visible = false; this.actived(false); if (this.closeCallback) { this.closeCallback(this.params.handle); }
        if (callback) callback(this.params.handle);
    }
    this.__oldSize = { w: this.width(), h: this.height() }; this.__oldPosition = { x: this.left(), y: this.top() };
}
$jm.objMove = function () {
    var _win; var _flag = false; var _objCurrentLocation; var _mouseLastLocation; var _mdHandler = function (evt) {
        if ((evt.button == 0 || evt.button == 1) && _win && _win.winState != $jm.winState.max) {
            _win.bodyModel.show(); evt = evt || window.event; _flag = true; _objCurrentLocation = { x: _win.win.position().left, y: _win.win.position().top }; _mouseLastLocation = $jm.getMouseLocation(evt); $(document).bind("mousemove", _mmHandler); $(document).bind("mouseup", _muHandler); if (evt.preventDefault)
                evt.preventDefault(); else
                evt.returnValue = false;
        } 
    }; var _mmHandler = function (evt) {
        if (_flag) {
            evt = evt || window.event; var _mouseCurrentLocation = $jm.getMouseLocation(evt); _objCurrentLocation.x = _objCurrentLocation.x + (_mouseCurrentLocation.x - _mouseLastLocation.x); _objCurrentLocation.y = _objCurrentLocation.y + (_mouseCurrentLocation.y - _mouseLastLocation.y); _mouseLastLocation = _mouseCurrentLocation; if (_objCurrentLocation.x > 1)
                _win.win.css("left", _objCurrentLocation.x + "px"); if (_objCurrentLocation.y > 1)
                _win.win.css("top", _objCurrentLocation.y + "px");
        } 
    }; var _muHandler = function (evt) { if (_flag) { evt = evt || window.event; _cleanHandlers(); _flag = false; } }; var _cleanHandlers = function () { if (_win) { $(document).unbind("mousemove"); $(document).unbind("mouseup"); _win.bodyModel.hide(); } }; this.Register = function (win) { _win = win; _win.winHead.unbind("mousedown", _mdHandler); _win.winHead.bind("mousedown", _mdHandler); } 
}; $jm.objResize = function () {
    var _win; var _flag = 0; var _curSize; var _lastLocation; var _resizeareawidth = 6; var mdHandler = function (evt) {
        if (_win) {
            evt = evt || window.event; _curSize = { w: _win.width(), h: _win.height() }; _lastLocation = $jm.getMouseLocation(evt); var tmpflag = 0; if (_win.win.offset().top + _curSize.h < _lastLocation.y + _resizeareawidth) _flag = 2; if (_win.win.offset().left + _curSize.w < _lastLocation.x + _resizeareawidth) tmpflag = 1; if (_flag == 2 && tmpflag == 1) { _flag = 3; $(this).css('cursor', 'se-resize'); }
            else if (tmpflag == 1) { _flag = tmpflag; $(this).css('cursor', 'e-resize'); }
            else if (_flag == 2) { $(this).css('cursor', 's-resize'); }
            else { $(this).css('cursor', 'default'); return; }
            _win.bodyModel.show(); $(document).bind("mousemove", mmHandler); $(document).bind("mouseup", muHandler); if (evt.preventDefault)
                evt.preventDefault(); else
                evt.returnValue = false;
        } 
    }; var mmHandler = function (evt) {
        if (_flag != 0) {
            evt = evt || window.event; var _mouseCurrentLocation = $jm.getMouseLocation(evt); _curSize.w = _curSize.w + (_mouseCurrentLocation.x - _lastLocation.x); _curSize.h = _curSize.h + (_mouseCurrentLocation.y - _lastLocation.y); _lastLocation = _mouseCurrentLocation; if (_flag == 1 || _flag == 3) _win.width(_curSize.w); if (_flag == 2 || _flag == 3) _win.height(_curSize.h); if (evt.preventDefault)
                evt.preventDefault(); else
                evt.returnValue = false;
        } 
    }; var muHandler = function (evt) { if (_flag != 0) { evt = evt || window.event; cleanMouseHandlers(); _flag = 0; _win.bodyModel.hide(); } }; var cleanMouseHandlers = function () { if (_win) { _win.win.css('cursor', 'default'); $(document).unbind("mousemove"); $(document).unbind("mouseup"); } }; this.Register = function (win) { _win = win; _win.win.unbind("mousedown"); _win.win.bind("mousedown", mdHandler); } 
}; $jm.buttons = { OK: 1, YesOrNo: 2 }; $jm.msgbox = function (pars) {
    var msg = pars.content; var title = pars.title || msg; var button = []; var _box; if (pars.button == $jm.buttons.YesOrNo) { button.push({ text: pars.oktext || '是', click: function () { if (pars.ok) pars.ok(); _box.close(); } }); button.push({ text: pars.notext || '否', click: function () { if (pars.no) pars.no(); _box.close(); } }); }
    else { button.push({ text: pars.oktext || '确定', click: pars.ok }); }
    _box = new $jm.win({ title: title, modal: true, content: msg, button: button, position: 'center' }); this.show = function () { _box.show(); };
}
$jm.os = new (function () {
    this.body; this.statusTool; this.bodyMenu; this.config = { skin: 'default', desktop: { itemSize: { w: 60, h: 80 }, desItems: [], itemIndex: 0, backGroundUrl: 'css/default/images/wallpaper.jpg', getItemByIndex: function (index) { var len = $jm.os.config.desktop.desItems.length; for (var i = 0; i < len; i++) { if ($jm.os.config.desktop.desItems[i].index == index) { return $jm.os.config.desktop.desItems[i]; } } }, position: function (w, h) { var len = $jm.os.config.desktop.desItems.length; for (var i = 0; i < len; i++) { $jm.os.config.desktop.desItems[i].position(w, h); } } }, appMinZIndex: 100, handleIndex: 0, appLinks: [], apps: [] }; var appItem = function (pars) {
        $jm.os.config.handleIndex += 1; pars.handle = this.handle = $jm.os.config.handleIndex; pars.id = this.id = pars.id || 'jm_app_' + this.handle; this.name = pars.name || pars.title; this.parent = pars.parent ? (parent.element || pars.parent) : $jm.os.body; this.ico = pars.ico || 'css/' + $jm.os.config.skin + '/images/' + (pars.folder ? 'Folder.png' : 'ico.png'); pars.ico = this.ico; this.event = pars.ev; this.params = pars; this.element = pars.element; this.jmapp = true; this.linkIndex = 0; this.links = []; this.cleaLink = function () { this.linkIndex = 0; }
        this.addLink = function (link) { this.links.push(link); }
        this.positionLinks = function () { for (var l in this.links) { this.links[l].position(); } }
        this.selectedAllLink = function (s) { for (var l in this.links) { this.links[l].selected(s); } }
        this.getLinkByHandle = function (handle) { for (var l in this.links) { if (this.links[l].link == handle) return this.links[l]; } }
        if (!pars.sys) { pars.focusCallback = $jm.os.appFocusCallback; pars.subCallback = $jm.os.appSubCallback; pars.closeCallback = $jm.os.appCloseCallback; }
        this.__showed = false; if (!pars.sys) { this.taskItem = new taskItem(this); }
        this.show = function () { if (!this.element) this.element = new $jm.win(pars); if (this.element.appendTo) this.element.appendTo(this.parent.element ? this.parent.element : this.parent); this.element.show(); this.__showed = true; if (this.taskItem) { this.taskItem.show(); } }; this.active = function () { if (this.element.visible) { this.element.visible(true); this.element.focus(); } }
        this.hide = function () { this.element.hide(); this.__showed = false; };
    }
    this.appFocusCallback = function (handle) { var app = $jm.os.getAppByHandle(handle); if (app && app.taskItem) { app.taskItem.focus(); } }
    this.appSubCallback = function (handle) { var app = $jm.os.getAppByHandle(handle); if (app && app.taskItem) { app.taskItem.sub(); } }
    this.appCloseCallback = function (handle) { var app = $jm.os.getAppByHandle(handle); if (app && app.taskItem) { app.taskItem.close(); } }
    this.selectedAllDesItems = function (s) { var len = $jm.os.config.desktop.desItems.length; for (var i = 0; i < len; i++) { var item = $jm.os.config.desktop.desItems[i]; item.selected(s); } }; this.desItem = function (pars, container, index) {
        this.link = pars.handle; this.index = $jm.isNull(index) ? $jm.os.config.desktop.itemIndex++ : index; this.parent = container || pars.container || $jm.os.body.element; this.isDes = this.parent == $jm.os.body.element; this.desbody = $('<div class="jmdesktopitem" jm_desindex="' + this.index + '"></div>'); var __seleted = false; this.selected = function (s) {
            if (s == true) {
                if (this.isDes) { $jm.os.selectedAllDesItems(!s); }
                else { var app = $jm.os.getAppByHandle(this.parentHandle); if (app) { app.selectedAllLink(!s); } }
                this.desbody.addClass('jmdesktopitemfocus'); __seleted = s;
            }
            else if (s == false) { __seleted = s; this.desbody.removeClass('jmdesktopitemfocus'); }
            return __seleted;
        }; this.app = function () { return $jm.os.getAppByHandle(this.link); }
        this.resize = function () { this.desbody.width($jm.os.config.desktop.itemSize.w); }
        this.position = function (w, h) { var w = w || $jm.os.config.desktop.itemSize.w; var h = h || $jm.os.config.desktop.itemSize.h; var offsety = 8; h += offsety; var ycount = Math.floor((this.parent.height() - offsety) / h); ycount = ycount < 0 ? 0 : ycount; var xy = Math.floor(this.index / ycount); var curx = xy * w; var cury = (this.index - (xy * ycount)) * h; this.desbody.css('top', cury + offsety); this.desbody.css('left', curx); return this.desbody.position(); }
        var __showed = false; this.show = function () {
            if (__showed) return; var app = this.app(); if (app) {
                var img = $('<img src="' + app.ico + '" border="0" alt="' + app.name + '" />'); img.appendTo(this.desbody); var text = $('<span class="text"></span>'); text.text(app.name); text.appendTo(this.desbody); this.desbody.attr('title', app.name); this.desbody.attr('jm_link_parenthandle', this.parentHandle); this.desbody.attr('jm_app_handle', this.link); this.desbody.attr('jm_des', this.isDes); this.desbody.appendTo(this.parent); this.desbody.bind('click', function (ev) {
                    var obj = $(this); var item; var des = obj.attr('jm_des'); if (des.toLowerCase() == 'true') { var itemindex = obj.attr('jm_desindex'); item = $jm.os.config.desktop.getItemByIndex(itemindex); }
                    if (!item) { var phandle = obj.attr('jm_link_parenthandle'); var handle = obj.attr('jm_app_handle'); var app = $jm.os.getAppByHandle(phandle); if (app) item = app.getLinkByHandle(handle); }
                    if (item) {
                        var selected = item.selected(); if (selected)
                        { item.app().show(); }
                        item.selected(!selected);
                    } 
                }); if ($.browser.msie && $.browser.version < '9') { this.desbody.dblclick(function (ev) { var itemindex = $(this).attr('jm_desindex'); var item = $jm.os.config.desktop.getItemByIndex(itemindex); if (item) { item.app().show(); item.selected(false); } }); }
                __showed = true; this.resize(); this.position();
            } 
        } 
    }
    this.addLinkItem = function (handle, toHandle) {
        var app = this.getAppByHandle(handle); if (app) {
            var parent = this.getAppByHandle(toHandle); var container = parent && parent.element && parent.element.winBody ? parent.element.winBody : null; var index = parent && !$jm.isNull(parent.linkIndex) ? parent.linkIndex++ : null; var item = new this.desItem(app, container, index); if (toHandle) item.parentHandle = toHandle; if (parent && parent.jmapp) { parent.addLink(item); }
            else { this.config.desktop.desItems.push(item); }
            item.show();
        } 
    }
    var taskItem = function (app) {
        this.task = $('#jm_task_' + app.handle); if (this.task.length > 0) return; this.task = $('<div id="jm_task_' + app.handle + '" class="jmos_taskitem" ><div>'); var taskbody = $('<div class="body"></div>')
        taskbody.appendTo(this.task); var img = $('<img src="' + app.ico + '" border="0" alt="' + app.name + '" />'); img.appendTo(this.task); this.showed = false; this.task.attr('app', app.handle); this.task.attr('title', app.name); this.taskClick = function () {
            var handle = $(this).attr('app'); var app = $jm.os.getAppByHandle(handle); if (app) {
                if (app.element && !$jm.isNull(app.element.winState)) { if (app.element.winState != $jm.winState.min && app.element.actived()) { app.element.min(); return; } }
                app.active();
            } 
        }
        this.show = function () {
            if (!this.showed) { this.task.appendTo($jm.os.statusTool.element); this.task.unbind('click', this.taskClick); this.task.bind('click', this.taskClick); }
            this.showed = true;
        }
        this.focus = function () { this.task.addClass('jmos_taskitemfocus'); }; this.sub = function () { this.task.removeClass('jmos_taskitemfocus') }; this.close = function () { this.task.remove(); this.showed = false; };
    }
    this.addBodyMenu = function (item) { this.bodyMenu.addItem(item); }
    this.installApp = function (pars) {
        var name = pars.name || pars.title; var apptmp = this.getAppByName(name); if (!$jm.isNull(apptmp)) { pars.handle = apptmp.handle; $jm.out('应用:' + name + ' 已存在,添加失败!'); return; }
        var app = new appItem(pars); this.config.apps.push(app); if (pars.des == true) { this.addLinkItem(app.handle); }
        if (pars.bgMenu == true) { this.addBodyMenu({ text: app.name, tag: app.handle, click: function () { var handle = $(this).attr('tag'); $jm.os.runAppByHandle(handle); } }); } 
    }
    this.getApp = function (f) { var len = this.config.apps.length; for (var i = 0; i < len; i++) { var app = this.config.apps[i]; if (app.handle == f || app.id == f || app.name == f) return app; } }
    this.getAppByHandle = function (handle) { var len = this.config.apps.length; for (var i = 0; i < len; i++) { if (this.config.apps[i].handle == handle) return this.config.apps[i]; } }
    this.getAppById = function (id) { var len = this.config.apps.length; for (var i = 0; i < len; i++) { if (this.config.apps[i].id == id) return this.config.apps[i]; } }
    this.getAppByName = function (n) { for (var p in this.config.apps) { if (this.config.apps[p].name == n) { return this.config.apps[p]; } } }
    this.runAppByName = function (n) { var app = this.getAppByName(n); if (app && app.show) app.show(); }
    this.runAppByHandle = function (handle) { var app = this.getAppByHandle(handle); if (app && app.show) app.show(); }
    this.activeAppByHandle = function (handle) { var app = this.getAppByHandle(handle); if (app && app.active) app.active(); }
    this.setBackgroudImg = function (url) { if (url) this.config.desktop.backGroundUrl = url; $('body').css('background-image', 'url("' + $jm.os.config.desktop.backGroundUrl + '")'); }
    this.setSkin = function (skin, callback) { if (skin) this.config.skin = skin; var csscallback = callback; $jm.loadCss('css/' + this.config.skin + '/desktop.css', 'cssdesktop', function () { $jm.loadCss('css/' + $jm.os.config.skin + '/Control.css', 'cssControl', csscallback); }); }
    this.initMenu = function () { this.bodyMenu = new $jm.menu(this.body.element); }
    this.resizeHandler = function () { $jm.os.body.element.height($(window).height() - $jm.os.statusTool.element.height()); var spw = 10; $jm.os.config.desktop.position($jm.os.config.desktop.itemSize.w + spw, $jm.os.config.desktop.itemSize.h + spw); }; this.loadDesktop = function () {
        this.statusTool.show(); this.body.show(); var len = this.config.desktop.desItems.length; for (var i = 0; i < len; i++) { this.config.desktop.desItems[i].show(); }
        if ($.browser.msie && $.browser.version < 9) { var tootipcontent = $('<div class="jm_win_tooltip" style="left:2px;top:2px;margin-top:4px;margin-right:10px;z-index:1;float:right;"></div>'); tootipcontent.html("请使用火狐,谷歌,苹果,IE9及以上版本浏览器获得最佳效果"); tootipcontent.appendTo(this.body.element); }
        $jm.os.setBackgroudImg();
    }
    this._initApp = function () {
        var index = 0; var linkapp = function () {
            var url = 'app/' + $jm.os.config.appLinks[index]; $jm.load(url + '/main.js', function (js) {
                try { var apppars = eval(js); for (var par in apppars) { var pars = apppars[par]; if ($jm.isNull(pars.url)) pars.url = url + '/index.html'; $jm.os.installApp(pars); } }
                catch (e) { $jm.out(e, 1); }
                finally { index++; linkapp() } 
            });
        }
        linkapp();
    }
    this.init = function (callback) { this.setSkin('default', function () { $jm.os.body = new appItem({ parent: $('body'), element: $('<div id="jm_os_bodyarea" class="jmos_body"></div>'), sys: true }); $jm.os.statusTool = new appItem({ parent: $('body'), element: $('<div class="jmos_status"></div>'), sys: true }); $jm.os.initMenu(); $jm.os._initApp(); $jm.os.loadDesktop(); if (callback) callback(); $(window).resize($jm.os.resizeHandler); $jm.os.resizeHandler(); }); } 
})();